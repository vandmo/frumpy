---
swagger: "2.0"
x-frumpy: "0.1"
info:
  description: "This is a sample server Petstore server.  You can find out more about\
    \ Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\
    \  For this sample, you can use the api key `special-key` to test the authorization\
    \ filters."
  version: "1.0.0"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "pet"
  description: "Everything about your Pets"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "store"
  description: "Access to Petstore orders"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /pets:add:
    post:
      tags:
      - "pet"
      summary: "Add a new pet to the store"
      description: ""
      operationId: "addPet"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Pet"
      responses:
        200:
          description: "Response, exactly one of the top level properties"
          schema:
            type: object
            properties:
              added:
                description: "The pet was added"
                type: object
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pets:update:
    post:
      tags:
      - "pet"
      summary: "Update an existing pet"
      description: ""
      operationId: "updatePet"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Pet"
      responses:
        200:
          description: "Response, exactly one of the top level properties"
          schema:
            type: object
            properties:
              updated:
                description: "The pet was updated"
                type: object
              invalidId:
                description: "Not updated, the ID was invalid"
                type: object
              noSuchPet:
                description: "Not updated, the pet was not found"
                type: object
              invalid:
                description: "Not updated, something was not valid"
                type: object
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pets:findByStatus:
    post:
      tags:
      - "pet"
      summary: "Finds Pets by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPetsByStatus"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Request"
        required: true
        schema:
          type: object
          required:
          - status
          properties:
            status:
              description: "Statuses to filter by"
              type: "array"
              items:
                type: "string"
                enum:
                - "available"
                - "pending"
                - "sold"
                default: "available"
      responses:
        200:
          description: "Response, exactly one of the top level properties"
          schema:
            type: object
            properties:
              pets:
                description: "The pets found"
                type: "array"
                items:
                  $ref: "#/definitions/Pet"
              invalidStatus:
                description: "Invalid status value"
                type: object
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /pets:findByTags:
    post:
      tags:
      - "pet"
      summary: "Finds Pets by tags"
      description: "Multiple tags can be provided with comma separated strings. Use\
        \ tag1, tag2, tag3 for testing."
      operationId: "findPetsByTags"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Request"
        required: true
        schema:
          type: object
          required:
          - tags
          properties:
            tags:
              description: "Tags to filter by"
              type: "array"
              items:
                type: "string"
      responses:
        200:
          description: "Response, exactly one of the top level properties"
          schema:
            type: object
            properties:
              pets:
                description: "The pets found"
                type: "array"
                items:
                  $ref: "#/definitions/Pet"
              invalidStatus:
                description: "Invalid tag value"
                type: object
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      deprecated: true
  /pets:getById:
    post:
      tags:
      - "pet"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getPetById"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Request"
        required: true
        schema:
          type: object
          required:
          - id
          properties:
            id:
              description: "ID of pet to return"
              type: "integer"
              format: "int64"
      responses:
          200:
            description: "Response, exactly one of the top level properties"
            schema:
              type: object
              properties:
                pet:
                  description: "The pet"
                  type: object
                  $ref: "#/definitions/Pet"
                invalidId:
                  description: "Not updated, the ID was invalid"
                  type: object
                noSuchPet:
                  description: "Not updated, the pet was not found"
                  type: object
      security:
      - api_key: []
  /pets:delete:
    post:
      tags:
      - "pet"
      summary: "Deletes a pet"
      description: ""
      operationId: "deletePet"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "petId"
        in: "path"
        description: "Pet id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
          200:
            description: "Response, exactly one of the top level properties"
            schema:
              type: object
              properties:
                deleted:
                  description: "The pet was deleted"
                  type: object
                invalidId:
                  description: "Not updated, the ID was invalid"
                  type: object
                noSuchPet:
                  description: "Not updated, the pet was not found"
                  type: object
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /store:getInventory:
    post:
      tags:
      - "store"
      summary: "Returns pet inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
      security:
      - api_key: []
  /store:placeOrder:
    post:
      tags:
      - "store"
      summary: "Place an order for a pet"
      description: ""
      operationId: "placeOrder"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the pet"
        required: true
        schema:
          $ref: "#/definitions/Order"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid Order"
  /store:getOrderById:
    post:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.\
        \ Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Request"
        required: true
        schema:
          type: object
          required:
          - orderId
          properties:
            orderId:
              description: "ID of pet that needs to be fetched"
              type: "integer"
              format: "int64"
              maximum: 10.0
              minimum: 1.0
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
  /store:deleteOrderById:
    post:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.\
        \ Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Request"
        required: true
        schema:
          type: object
          required:
          - orderId
          properties:
            orderId:
              description: "ID of pet that needs to be fetched"
              type: "integer"
              format: "int64"
              minimum: 1.0
      responses:
        400:
          description: "Invalid ID supplied"
        404:
          description: "Order not found"
  /users:create:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /users:batchCreate:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
      responses:
        default:
          description: "successful operation"
  /users:login:
    post:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
        400:
          description: "Invalid username/password supplied"
  /users:logout:
    post:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters: []
      responses:
        default:
          description: "successful operation"
  /users:getByName:
    post:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Request"
        required: true
        schema:
          type: object
          required:
          - username
          properties:
            username:
              description: "The name that needs to be fetched. Use user1 for testing."
              type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
  /users:update:
    post:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Request"
        required: true
        schema:
          type: object
          required:
          - username
          - user
          properties:
            username:
              description: "The name of the user that needs to be updated"
              type: "string"
            user:
              description: "Updated user object"
              $ref: "#/definitions/User"
      responses:
        400:
          description: "Invalid user supplied"
        404:
          description: "User not found"
  /users:delete:
    post:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Request"
        required: true
        schema:
          type: object
          required:
          - username
          properties:
            username:
              description: "The name of the user that should be deleted"
              type: "string"
      responses:
        400:
          description: "Invalid username supplied"
        404:
          description: "User not found"
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "https://petstore.swagger.io/oauth/authorize"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
        default: false
    xml:
      name: "Order"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          name: "photoUrl"
          wrapped: true
        items:
          type: "string"
      tags:
        type: "array"
        xml:
          name: "tag"
          wrapped: true
        items:
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
